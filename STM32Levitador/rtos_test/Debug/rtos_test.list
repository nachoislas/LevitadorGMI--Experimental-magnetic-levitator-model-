
rtos_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080038d8  080038d8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d8  080038d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080038e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001098  20000010  080038f0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a8  080038f0  000210a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107ba  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027ed  00000000  00000000  000307f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  00032fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef8  00000000  00000000  00034010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015cf4  00000000  00000000  00034f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd39  00000000  00000000  0004abfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079ef8  00000000  00000000  00056935  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d082d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004284  00000000  00000000  000d08a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080037dc 	.word	0x080037dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080037dc 	.word	0x080037dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000002c 	.word	0x2000002c
 800018c:	20000080 	.word	0x20000080

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b09c      	sub	sp, #112	; 0x70
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fb13 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f861 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f8cf 	bl	8000340 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a2:	f000 f8a3 	bl	80002ec <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001a6:	4b26      	ldr	r3, [pc, #152]	; (8000240 <main+0xb0>)
 80001a8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80001ac:	461d      	mov	r5, r3
 80001ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f002 f941 	bl	8002448 <osThreadCreate>
 80001c6:	4602      	mov	r2, r0
 80001c8:	4b1e      	ldr	r3, [pc, #120]	; (8000244 <main+0xb4>)
 80001ca:	601a      	str	r2, [r3, #0]

  /* definition and creation of blinkTask */
  osThreadDef(blinkTask, blink, osPriorityIdle, 0, 128);
 80001cc:	4b1e      	ldr	r3, [pc, #120]	; (8000248 <main+0xb8>)
 80001ce:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80001d2:	461d      	mov	r5, r3
 80001d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 80001e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 f92e 	bl	8002448 <osThreadCreate>
 80001ec:	4602      	mov	r2, r0
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <main+0xbc>)
 80001f0:	601a      	str	r2, [r3, #0]

  /* definition and creation of serialPrintTask */
  osThreadDef(serialPrintTask, serialPrint, osPriorityIdle, 0, 128);
 80001f2:	4b17      	ldr	r3, [pc, #92]	; (8000250 <main+0xc0>)
 80001f4:	f107 041c 	add.w	r4, r7, #28
 80001f8:	461d      	mov	r5, r3
 80001fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialPrintTaskHandle = osThreadCreate(osThread(serialPrintTask), NULL);
 8000206:	f107 031c 	add.w	r3, r7, #28
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f002 f91b 	bl	8002448 <osThreadCreate>
 8000212:	4602      	mov	r2, r0
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <main+0xc4>)
 8000216:	601a      	str	r2, [r3, #0]

  /* definition and creation of rxTask */
  osThreadDef(rxTask, serialReceive, osPriorityIdle, 0, 128);
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <main+0xc8>)
 800021a:	463c      	mov	r4, r7
 800021c:	461d      	mov	r5, r3
 800021e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000222:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rxTaskHandle = osThreadCreate(osThread(rxTask), NULL);
 800022a:	463b      	mov	r3, r7
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f002 f90a 	bl	8002448 <osThreadCreate>
 8000234:	4602      	mov	r2, r0
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <main+0xcc>)
 8000238:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800023a:	f002 f8fe 	bl	800243a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023e:	e7fe      	b.n	800023e <main+0xae>
 8000240:	08003800 	.word	0x08003800
 8000244:	20000fd0 	.word	0x20000fd0
 8000248:	08003828 	.word	0x08003828
 800024c:	20000fd4 	.word	0x20000fd4
 8000250:	08003854 	.word	0x08003854
 8000254:	2000105c 	.word	0x2000105c
 8000258:	08003878 	.word	0x08003878
 800025c:	20000fd8 	.word	0x20000fd8

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b090      	sub	sp, #64	; 0x40
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f003 faac 	bl	80037cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000282:	2301      	movs	r3, #1
 8000284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fd9b 	bl	8000de4 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b4:	f000 f91a 	bl	80004ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2302      	movs	r3, #2
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2102      	movs	r1, #2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 f806 	bl	80012e4 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002de:	f000 f905 	bl	80004ec <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3740      	adds	r7, #64	; 0x40
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <MX_USART1_UART_Init+0x50>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 80002f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000324:	f001 fba2 	bl	8001a6c <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800032e:	f000 f8dd 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000101c 	.word	0x2000101c
 800033c:	40013800 	.word	0x40013800

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <MX_GPIO_Init+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a1d      	ldr	r2, [pc, #116]	; (80003d0 <MX_GPIO_Init+0x90>)
 800035a:	f043 0310 	orr.w	r3, r3, #16
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_GPIO_Init+0x90>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0310 	and.w	r3, r3, #16
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_GPIO_Init+0x90>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a17      	ldr	r2, [pc, #92]	; (80003d0 <MX_GPIO_Init+0x90>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <MX_GPIO_Init+0x90>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0320 	and.w	r3, r3, #32
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MX_GPIO_Init+0x90>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a11      	ldr	r2, [pc, #68]	; (80003d0 <MX_GPIO_Init+0x90>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_GPIO_Init+0x90>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	480c      	ldr	r0, [pc, #48]	; (80003d4 <MX_GPIO_Init+0x94>)
 80003a4:	f000 fcee 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2302      	movs	r3, #2
 80003b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	4619      	mov	r1, r3
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_GPIO_Init+0x94>)
 80003c2:	f000 fb85 	bl	8000ad0 <HAL_GPIO_Init>

}
 80003c6:	bf00      	nop
 80003c8:	3720      	adds	r7, #32
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40011000 	.word	0x40011000

080003d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
//	if(huart->Instance == huart1.Instance){
		serialInputData[serialInputIndex] = rxData;
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <HAL_UART_RxCpltCallback+0x58>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b13      	ldr	r3, [pc, #76]	; (8000434 <HAL_UART_RxCpltCallback+0x5c>)
 80003e8:	7819      	ldrb	r1, [r3, #0]
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <HAL_UART_RxCpltCallback+0x60>)
 80003ec:	5499      	strb	r1, [r3, r2]
		serialInputIndex++;
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <HAL_UART_RxCpltCallback+0x58>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <HAL_UART_RxCpltCallback+0x58>)
 80003f8:	701a      	strb	r2, [r3, #0]
		if(rxData == '\n'){
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <HAL_UART_RxCpltCallback+0x5c>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b0a      	cmp	r3, #10
 8000400:	d112      	bne.n	8000428 <HAL_UART_RxCpltCallback+0x50>
			serialInputData[serialInputIndex] = '\0';
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <HAL_UART_RxCpltCallback+0x58>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	461a      	mov	r2, r3
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <HAL_UART_RxCpltCallback+0x60>)
 800040a:	2100      	movs	r1, #0
 800040c:	5499      	strb	r1, [r3, r2]
			serialInputIndex = 0;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <HAL_UART_RxCpltCallback+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*) serialInputData, strlen(serialInputData));
 8000414:	4808      	ldr	r0, [pc, #32]	; (8000438 <HAL_UART_RxCpltCallback+0x60>)
 8000416:	f7ff fe9b 	bl	8000150 <strlen>
 800041a:	4603      	mov	r3, r0
 800041c:	b29b      	uxth	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	4905      	ldr	r1, [pc, #20]	; (8000438 <HAL_UART_RxCpltCallback+0x60>)
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <HAL_UART_RxCpltCallback+0x64>)
 8000424:	f001 fc08 	bl	8001c38 <HAL_UART_Transmit_IT>
		}
	//}
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20001060 	.word	0x20001060
 8000434:	20000fcc 	.word	0x20000fcc
 8000438:	20000fdc 	.word	0x20000fdc
 800043c:	2000101c 	.word	0x2000101c

08000440 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f002 f849 	bl	80024e0 <osDelay>
 800044e:	e7fb      	b.n	8000448 <StartDefaultTask+0x8>

08000450 <blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void blink(void const * argument)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045c:	4803      	ldr	r0, [pc, #12]	; (800046c <blink+0x1c>)
 800045e:	f000 fca9 	bl	8000db4 <HAL_GPIO_TogglePin>
    osDelay(40);
 8000462:	2028      	movs	r0, #40	; 0x28
 8000464:	f002 f83c 	bl	80024e0 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000468:	e7f6      	b.n	8000458 <blink+0x8>
 800046a:	bf00      	nop
 800046c:	40011000 	.word	0x40011000

08000470 <serialPrint>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serialPrint */
void serialPrint(void const * argument)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serialPrint */
	char *buf = "CONECTADO\r\n\0";
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <serialPrint+0x2c>)
 800047a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart1,(uint8_t*) buf, strlen(buf), 100);
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f7ff fe67 	bl	8000150 <strlen>
 8000482:	4603      	mov	r3, r0
 8000484:	b29a      	uxth	r2, r3
 8000486:	2364      	movs	r3, #100	; 0x64
 8000488:	68f9      	ldr	r1, [r7, #12]
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <serialPrint+0x30>)
 800048c:	f001 fb3b 	bl	8001b06 <HAL_UART_Transmit>
    osDelay(3000);
 8000490:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000494:	f002 f824 	bl	80024e0 <osDelay>
	HAL_UART_Transmit(&huart1,(uint8_t*) buf, strlen(buf), 100);
 8000498:	e7f0      	b.n	800047c <serialPrint+0xc>
 800049a:	bf00      	nop
 800049c:	08003894 	.word	0x08003894
 80004a0:	2000101c 	.word	0x2000101c

080004a4 <serialReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serialReceive */
void serialReceive(void const * argument)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serialReceive */

  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80004ac:	2201      	movs	r2, #1
 80004ae:	4904      	ldr	r1, [pc, #16]	; (80004c0 <serialReceive+0x1c>)
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <serialReceive+0x20>)
 80004b2:	f001 fc05 	bl	8001cc0 <HAL_UART_Receive_IT>
    osDelay(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f002 f812 	bl	80024e0 <osDelay>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80004bc:	e7f6      	b.n	80004ac <serialReceive+0x8>
 80004be:	bf00      	nop
 80004c0:	20000fcc 	.word	0x20000fcc
 80004c4:	2000101c 	.word	0x2000101c

080004c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d101      	bne.n	80004de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004da:	f000 f987 	bl	80007ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40012c00 	.word	0x40012c00

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <Error_Handler+0x6>

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <HAL_MspInit+0x68>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a17      	ldr	r2, [pc, #92]	; (800055c <HAL_MspInit+0x68>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_MspInit+0x68>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_MspInit+0x68>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a11      	ldr	r2, [pc, #68]	; (800055c <HAL_MspInit+0x68>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_MspInit+0x68>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	210f      	movs	r1, #15
 800052e:	f06f 0001 	mvn.w	r0, #1
 8000532:	f000 fa2c 	bl	800098e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_MspInit+0x6c>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <HAL_MspInit+0x6c>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a20      	ldr	r2, [pc, #128]	; (8000600 <HAL_UART_MspInit+0x9c>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d139      	bne.n	80005f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <HAL_UART_MspInit+0xa0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <HAL_UART_MspInit+0xa0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_UART_MspInit+0xa0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <HAL_UART_MspInit+0xa0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a18      	ldr	r2, [pc, #96]	; (8000604 <HAL_UART_MspInit+0xa0>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_UART_MspInit+0xa0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	4619      	mov	r1, r3
 80005c8:	480f      	ldr	r0, [pc, #60]	; (8000608 <HAL_UART_MspInit+0xa4>)
 80005ca:	f000 fa81 	bl	8000ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4619      	mov	r1, r3
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <HAL_UART_MspInit+0xa4>)
 80005e4:	f000 fa74 	bl	8000ad0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2105      	movs	r1, #5
 80005ec:	2025      	movs	r0, #37	; 0x25
 80005ee:	f000 f9ce 	bl	800098e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005f2:	2025      	movs	r0, #37	; 0x25
 80005f4:	f000 f9e7 	bl	80009c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40013800 	.word	0x40013800
 8000604:	40021000 	.word	0x40021000
 8000608:	40010800 	.word	0x40010800

0800060c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800061c:	2200      	movs	r2, #0
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	2019      	movs	r0, #25
 8000622:	f000 f9b4 	bl	800098e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000626:	2019      	movs	r0, #25
 8000628:	f000 f9cd 	bl	80009c6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <HAL_InitTick+0x9c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <HAL_InitTick+0x9c>)
 8000632:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_InitTick+0x9c>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000644:	f107 0210 	add.w	r2, r7, #16
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f000 ffc6 	bl	80015e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000654:	f000 ffb0 	bl	80015b8 <HAL_RCC_GetPCLK2Freq>
 8000658:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <HAL_InitTick+0xa0>)
 800065e:	fba2 2303 	umull	r2, r3, r2, r3
 8000662:	0c9b      	lsrs	r3, r3, #18
 8000664:	3b01      	subs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_InitTick+0xa4>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <HAL_InitTick+0xa8>)
 800066c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_InitTick+0xa4>)
 8000670:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000674:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_InitTick+0xa4>)
 8000678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_InitTick+0xa4>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_InitTick+0xa4>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <HAL_InitTick+0xa4>)
 800068a:	f000 fff7 	bl	800167c <HAL_TIM_Base_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d104      	bne.n	800069e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <HAL_InitTick+0xa4>)
 8000696:	f001 f825 	bl	80016e4 <HAL_TIM_Base_Start_IT>
 800069a:	4603      	mov	r3, r0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3730      	adds	r7, #48	; 0x30
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	431bde83 	.word	0x431bde83
 80006b0:	20001064 	.word	0x20001064
 80006b4:	40012c00 	.word	0x40012c00

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
	...

080006e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <TIM1_UP_IRQHandler+0x10>)
 80006ea:	f001 f81e 	bl	800172a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20001064 	.word	0x20001064

080006f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <USART1_IRQHandler+0x10>)
 80006fe:	f001 fb33 	bl	8001d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000101c 	.word	0x2000101c

0800070c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <SystemInit+0x5c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <SystemInit+0x5c>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <SystemInit+0x5c>)
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	4911      	ldr	r1, [pc, #68]	; (8000768 <SystemInit+0x5c>)
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <SystemInit+0x60>)
 8000724:	4013      	ands	r3, r2
 8000726:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <SystemInit+0x5c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <SystemInit+0x5c>)
 800072e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000736:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <SystemInit+0x5c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <SystemInit+0x5c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <SystemInit+0x5c>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <SystemInit+0x5c>)
 800074a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800074e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SystemInit+0x5c>)
 8000752:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000756:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <SystemInit+0x64>)
 800075a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800075e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	40021000 	.word	0x40021000
 800076c:	f8ff0000 	.word	0xf8ff0000
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000774:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000776:	e003      	b.n	8000780 <LoopCopyDataInit>

08000778 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800077a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800077c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800077e:	3104      	adds	r1, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000784:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000786:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000788:	d3f6      	bcc.n	8000778 <CopyDataInit>
  ldr r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800078c:	e002      	b.n	8000794 <LoopFillZerobss>

0800078e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000790:	f842 3b04 	str.w	r3, [r2], #4

08000794 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000796:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000798:	d3f9      	bcc.n	800078e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079a:	f7ff ffb7 	bl	800070c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f002 fff1 	bl	8003784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff fcf5 	bl	8000190 <main>
  bx lr
 80007a6:	4770      	bx	lr
  ldr r3, =_sidata
 80007a8:	080038e0 	.word	0x080038e0
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007b0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80007b4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80007b8:	200010a8 	.word	0x200010a8

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f8d1 	bl	8000978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ff18 	bl	800060c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fe8a 	bl	80004f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x1c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x20>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a03      	ldr	r2, [pc, #12]	; (800080c <HAL_IncTick+0x20>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	20000008 	.word	0x20000008
 800080c:	200010a4 	.word	0x200010a4

08000810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <HAL_GetTick+0x10>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	200010a4 	.word	0x200010a4

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <__NVIC_EnableIRQ+0x34>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff4f 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	4603      	mov	r3, r0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a0:	f7ff ff64 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff ffb2 	bl	8000914 <NVIC_EncodePriority>
 80009b0:	4602      	mov	r2, r0
 80009b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff81 	bl	80008c0 <__NVIC_SetPriority>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff57 	bl	8000888 <__NVIC_EnableIRQ>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d005      	beq.n	8000a06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2204      	movs	r2, #4
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	e051      	b.n	8000aaa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 020e 	bic.w	r2, r2, #14
 8000a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f022 0201 	bic.w	r2, r2, #1
 8000a24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <HAL_DMA_Abort_IT+0xd0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d029      	beq.n	8000a84 <HAL_DMA_Abort_IT+0xa0>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <HAL_DMA_Abort_IT+0xd4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d022      	beq.n	8000a80 <HAL_DMA_Abort_IT+0x9c>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <HAL_DMA_Abort_IT+0xd8>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d01a      	beq.n	8000a7a <HAL_DMA_Abort_IT+0x96>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_DMA_Abort_IT+0xdc>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d012      	beq.n	8000a74 <HAL_DMA_Abort_IT+0x90>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <HAL_DMA_Abort_IT+0xe0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d00a      	beq.n	8000a6e <HAL_DMA_Abort_IT+0x8a>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <HAL_DMA_Abort_IT+0xe4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d102      	bne.n	8000a68 <HAL_DMA_Abort_IT+0x84>
 8000a62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a66:	e00e      	b.n	8000a86 <HAL_DMA_Abort_IT+0xa2>
 8000a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a6c:	e00b      	b.n	8000a86 <HAL_DMA_Abort_IT+0xa2>
 8000a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a72:	e008      	b.n	8000a86 <HAL_DMA_Abort_IT+0xa2>
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	e005      	b.n	8000a86 <HAL_DMA_Abort_IT+0xa2>
 8000a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7e:	e002      	b.n	8000a86 <HAL_DMA_Abort_IT+0xa2>
 8000a80:	2310      	movs	r3, #16
 8000a82:	e000      	b.n	8000a86 <HAL_DMA_Abort_IT+0xa2>
 8000a84:	2301      	movs	r3, #1
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <HAL_DMA_Abort_IT+0xe8>)
 8000a88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	4798      	blx	r3
    } 
  }
  return status;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40020008 	.word	0x40020008
 8000ab8:	4002001c 	.word	0x4002001c
 8000abc:	40020030 	.word	0x40020030
 8000ac0:	40020044 	.word	0x40020044
 8000ac4:	40020058 	.word	0x40020058
 8000ac8:	4002006c 	.word	0x4002006c
 8000acc:	40020000 	.word	0x40020000

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b08b      	sub	sp, #44	; 0x2c
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae2:	e127      	b.n	8000d34 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	69fa      	ldr	r2, [r7, #28]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	f040 8116 	bne.w	8000d2e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b12      	cmp	r3, #18
 8000b08:	d034      	beq.n	8000b74 <HAL_GPIO_Init+0xa4>
 8000b0a:	2b12      	cmp	r3, #18
 8000b0c:	d80d      	bhi.n	8000b2a <HAL_GPIO_Init+0x5a>
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d02b      	beq.n	8000b6a <HAL_GPIO_Init+0x9a>
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d804      	bhi.n	8000b20 <HAL_GPIO_Init+0x50>
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d031      	beq.n	8000b7e <HAL_GPIO_Init+0xae>
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d01c      	beq.n	8000b58 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b1e:	e048      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d043      	beq.n	8000bac <HAL_GPIO_Init+0xdc>
 8000b24:	2b11      	cmp	r3, #17
 8000b26:	d01b      	beq.n	8000b60 <HAL_GPIO_Init+0x90>
          break;
 8000b28:	e043      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b2a:	4a89      	ldr	r2, [pc, #548]	; (8000d50 <HAL_GPIO_Init+0x280>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d026      	beq.n	8000b7e <HAL_GPIO_Init+0xae>
 8000b30:	4a87      	ldr	r2, [pc, #540]	; (8000d50 <HAL_GPIO_Init+0x280>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d806      	bhi.n	8000b44 <HAL_GPIO_Init+0x74>
 8000b36:	4a87      	ldr	r2, [pc, #540]	; (8000d54 <HAL_GPIO_Init+0x284>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d020      	beq.n	8000b7e <HAL_GPIO_Init+0xae>
 8000b3c:	4a86      	ldr	r2, [pc, #536]	; (8000d58 <HAL_GPIO_Init+0x288>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d01d      	beq.n	8000b7e <HAL_GPIO_Init+0xae>
          break;
 8000b42:	e036      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b44:	4a85      	ldr	r2, [pc, #532]	; (8000d5c <HAL_GPIO_Init+0x28c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d019      	beq.n	8000b7e <HAL_GPIO_Init+0xae>
 8000b4a:	4a85      	ldr	r2, [pc, #532]	; (8000d60 <HAL_GPIO_Init+0x290>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d016      	beq.n	8000b7e <HAL_GPIO_Init+0xae>
 8000b50:	4a84      	ldr	r2, [pc, #528]	; (8000d64 <HAL_GPIO_Init+0x294>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d013      	beq.n	8000b7e <HAL_GPIO_Init+0xae>
          break;
 8000b56:	e02c      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	623b      	str	r3, [r7, #32]
          break;
 8000b5e:	e028      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	3304      	adds	r3, #4
 8000b66:	623b      	str	r3, [r7, #32]
          break;
 8000b68:	e023      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	3308      	adds	r3, #8
 8000b70:	623b      	str	r3, [r7, #32]
          break;
 8000b72:	e01e      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	330c      	adds	r3, #12
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e019      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d102      	bne.n	8000b8c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b86:	2304      	movs	r3, #4
 8000b88:	623b      	str	r3, [r7, #32]
          break;
 8000b8a:	e012      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d105      	bne.n	8000ba0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b94:	2308      	movs	r3, #8
 8000b96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	611a      	str	r2, [r3, #16]
          break;
 8000b9e:	e008      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	615a      	str	r2, [r3, #20]
          break;
 8000baa:	e002      	b.n	8000bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
          break;
 8000bb0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	2bff      	cmp	r3, #255	; 0xff
 8000bb6:	d801      	bhi.n	8000bbc <HAL_GPIO_Init+0xec>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	e001      	b.n	8000bc0 <HAL_GPIO_Init+0xf0>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2bff      	cmp	r3, #255	; 0xff
 8000bc6:	d802      	bhi.n	8000bce <HAL_GPIO_Init+0xfe>
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	e002      	b.n	8000bd4 <HAL_GPIO_Init+0x104>
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	210f      	movs	r1, #15
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	401a      	ands	r2, r3
 8000be6:	6a39      	ldr	r1, [r7, #32]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 8096 	beq.w	8000d2e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c02:	4b59      	ldr	r3, [pc, #356]	; (8000d68 <HAL_GPIO_Init+0x298>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	4a58      	ldr	r2, [pc, #352]	; (8000d68 <HAL_GPIO_Init+0x298>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6193      	str	r3, [r2, #24]
 8000c0e:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <HAL_GPIO_Init+0x298>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c1a:	4a54      	ldr	r2, [pc, #336]	; (8000d6c <HAL_GPIO_Init+0x29c>)
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	3302      	adds	r3, #2
 8000c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	220f      	movs	r2, #15
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a4b      	ldr	r2, [pc, #300]	; (8000d70 <HAL_GPIO_Init+0x2a0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d013      	beq.n	8000c6e <HAL_GPIO_Init+0x19e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a4a      	ldr	r2, [pc, #296]	; (8000d74 <HAL_GPIO_Init+0x2a4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d00d      	beq.n	8000c6a <HAL_GPIO_Init+0x19a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a49      	ldr	r2, [pc, #292]	; (8000d78 <HAL_GPIO_Init+0x2a8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d007      	beq.n	8000c66 <HAL_GPIO_Init+0x196>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a48      	ldr	r2, [pc, #288]	; (8000d7c <HAL_GPIO_Init+0x2ac>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_GPIO_Init+0x192>
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x1a0>
 8000c62:	2304      	movs	r3, #4
 8000c64:	e004      	b.n	8000c70 <HAL_GPIO_Init+0x1a0>
 8000c66:	2302      	movs	r3, #2
 8000c68:	e002      	b.n	8000c70 <HAL_GPIO_Init+0x1a0>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <HAL_GPIO_Init+0x1a0>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c72:	f002 0203 	and.w	r2, r2, #3
 8000c76:	0092      	lsls	r2, r2, #2
 8000c78:	4093      	lsls	r3, r2
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c80:	493a      	ldr	r1, [pc, #232]	; (8000d6c <HAL_GPIO_Init+0x29c>)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3302      	adds	r3, #2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c9a:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4938      	ldr	r1, [pc, #224]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
 8000ca6:	e006      	b.n	8000cb6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca8:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4933      	ldr	r1, [pc, #204]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d006      	beq.n	8000cd0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	492e      	ldr	r1, [pc, #184]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	604b      	str	r3, [r1, #4]
 8000cce:	e006      	b.n	8000cde <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	4929      	ldr	r1, [pc, #164]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4924      	ldr	r1, [pc, #144]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	608b      	str	r3, [r1, #8]
 8000cf6:	e006      	b.n	8000d06 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	491f      	ldr	r1, [pc, #124]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d006      	beq.n	8000d20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	491a      	ldr	r1, [pc, #104]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60cb      	str	r3, [r1, #12]
 8000d1e:	e006      	b.n	8000d2e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	4915      	ldr	r1, [pc, #84]	; (8000d80 <HAL_GPIO_Init+0x2b0>)
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3301      	adds	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f47f aed0 	bne.w	8000ae4 <HAL_GPIO_Init+0x14>
  }
}
 8000d44:	bf00      	nop
 8000d46:	372c      	adds	r7, #44	; 0x2c
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	10210000 	.word	0x10210000
 8000d54:	10110000 	.word	0x10110000
 8000d58:	10120000 	.word	0x10120000
 8000d5c:	10310000 	.word	0x10310000
 8000d60:	10320000 	.word	0x10320000
 8000d64:	10220000 	.word	0x10220000
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40011400 	.word	0x40011400
 8000d80:	40010400 	.word	0x40010400

08000d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
 8000d90:	4613      	mov	r3, r2
 8000d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d94:	787b      	ldrb	r3, [r7, #1]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000da0:	e003      	b.n	8000daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	041a      	lsls	r2, r3, #16
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	611a      	str	r2, [r3, #16]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	887b      	ldrh	r3, [r7, #2]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dcc:	887a      	ldrh	r2, [r7, #2]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000dd2:	e002      	b.n	8000dda <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd4:	887a      	ldrh	r2, [r7, #2]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	611a      	str	r2, [r3, #16]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e26c      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8087 	beq.w	8000f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e04:	4b92      	ldr	r3, [pc, #584]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d00c      	beq.n	8000e2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e10:	4b8f      	ldr	r3, [pc, #572]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 030c 	and.w	r3, r3, #12
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d112      	bne.n	8000e42 <HAL_RCC_OscConfig+0x5e>
 8000e1c:	4b8c      	ldr	r3, [pc, #560]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e28:	d10b      	bne.n	8000e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2a:	4b89      	ldr	r3, [pc, #548]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d06c      	beq.n	8000f10 <HAL_RCC_OscConfig+0x12c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d168      	bne.n	8000f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e246      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4a:	d106      	bne.n	8000e5a <HAL_RCC_OscConfig+0x76>
 8000e4c:	4b80      	ldr	r3, [pc, #512]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a7f      	ldr	r2, [pc, #508]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e02e      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10c      	bne.n	8000e7c <HAL_RCC_OscConfig+0x98>
 8000e62:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7a      	ldr	r2, [pc, #488]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b78      	ldr	r3, [pc, #480]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a77      	ldr	r2, [pc, #476]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e01d      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0xbc>
 8000e86:	4b72      	ldr	r3, [pc, #456]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a71      	ldr	r2, [pc, #452]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b6f      	ldr	r3, [pc, #444]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a6e      	ldr	r2, [pc, #440]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e00b      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000ea0:	4b6b      	ldr	r3, [pc, #428]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a6a      	ldr	r2, [pc, #424]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b68      	ldr	r3, [pc, #416]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a67      	ldr	r2, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fca6 	bl	8000810 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fca2 	bl	8000810 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e1fa      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eda:	4b5d      	ldr	r3, [pc, #372]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xe4>
 8000ee6:	e014      	b.n	8000f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fc92 	bl	8000810 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fc8e 	bl	8000810 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e1e6      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x10c>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d063      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f2a:	4b49      	ldr	r3, [pc, #292]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d11c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x18c>
 8000f36:	4b46      	ldr	r3, [pc, #280]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d116      	bne.n	8000f70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <HAL_RCC_OscConfig+0x176>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d001      	beq.n	8000f5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e1ba      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4939      	ldr	r1, [pc, #228]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	e03a      	b.n	8000fe6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d020      	beq.n	8000fba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fc47 	bl	8000810 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fc43 	bl	8000810 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e19b      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	4927      	ldr	r1, [pc, #156]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]
 8000fb8:	e015      	b.n	8000fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fc26 	bl	8000810 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fc22 	bl	8000810 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e17a      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d03a      	beq.n	8001068 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d019      	beq.n	800102e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_RCC_OscConfig+0x274>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001000:	f7ff fc06 	bl	8000810 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fc02 	bl	8000810 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e15a      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fb0a 	bl	8001640 <RCC_Delay>
 800102c:	e01c      	b.n	8001068 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_RCC_OscConfig+0x274>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001034:	f7ff fbec 	bl	8000810 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103a:	e00f      	b.n	800105c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fbe8 	bl	8000810 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d908      	bls.n	800105c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e140      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	42420000 	.word	0x42420000
 8001058:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105c:	4b9e      	ldr	r3, [pc, #632]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e9      	bne.n	800103c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80a6 	beq.w	80011c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107a:	4b97      	ldr	r3, [pc, #604]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b94      	ldr	r3, [pc, #592]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a93      	ldr	r2, [pc, #588]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b91      	ldr	r3, [pc, #580]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b8e      	ldr	r3, [pc, #568]	; (80012dc <HAL_RCC_OscConfig+0x4f8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ae:	4b8b      	ldr	r3, [pc, #556]	; (80012dc <HAL_RCC_OscConfig+0x4f8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a8a      	ldr	r2, [pc, #552]	; (80012dc <HAL_RCC_OscConfig+0x4f8>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fba9 	bl	8000810 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fba5 	bl	8000810 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e0fd      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b81      	ldr	r3, [pc, #516]	; (80012dc <HAL_RCC_OscConfig+0x4f8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x312>
 80010e8:	4b7b      	ldr	r3, [pc, #492]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4a7a      	ldr	r2, [pc, #488]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6213      	str	r3, [r2, #32]
 80010f4:	e02d      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x334>
 80010fe:	4b76      	ldr	r3, [pc, #472]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a75      	ldr	r2, [pc, #468]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a72      	ldr	r2, [pc, #456]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	e01c      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x356>
 8001120:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a6c      	ldr	r2, [pc, #432]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6213      	str	r3, [r2, #32]
 800112c:	4b6a      	ldr	r3, [pc, #424]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a69      	ldr	r2, [pc, #420]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6213      	str	r3, [r2, #32]
 8001138:	e00b      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 800113a:	4b67      	ldr	r3, [pc, #412]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a66      	ldr	r2, [pc, #408]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	6213      	str	r3, [r2, #32]
 8001146:	4b64      	ldr	r3, [pc, #400]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4a63      	ldr	r2, [pc, #396]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800114c:	f023 0304 	bic.w	r3, r3, #4
 8001150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d015      	beq.n	8001186 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb59 	bl	8000810 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fb55 	bl	8000810 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001170:	4293      	cmp	r3, r2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e0ab      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001178:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0ee      	beq.n	8001162 <HAL_RCC_OscConfig+0x37e>
 8001184:	e014      	b.n	80011b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fb43 	bl	8000810 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fb3f 	bl	8000810 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	; 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e095      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a4:	4b4c      	ldr	r3, [pc, #304]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ee      	bne.n	800118e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d105      	bne.n	80011c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b6:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a47      	ldr	r2, [pc, #284]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8081 	beq.w	80012ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011cc:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d061      	beq.n	800129c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d146      	bne.n	800126e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e0:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <HAL_RCC_OscConfig+0x4fc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fb13 	bl	8000810 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ee:	f7ff fb0f 	bl	8000810 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e067      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d108      	bne.n	8001228 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	492d      	ldr	r1, [pc, #180]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a19      	ldr	r1, [r3, #32]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	430b      	orrs	r3, r1
 800123a:	4927      	ldr	r1, [pc, #156]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_RCC_OscConfig+0x4fc>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fae3 	bl	8000810 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff fadf 	bl	8000810 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e037      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x46a>
 800126c:	e02f      	b.n	80012ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_RCC_OscConfig+0x4fc>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff facc 	bl	8000810 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fac8 	bl	8000810 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e020      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x498>
 800129a:	e018      	b.n	80012ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e013      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d001      	beq.n	80012ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40007000 	.word	0x40007000
 80012e0:	42420060 	.word	0x42420060

080012e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0d0      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d910      	bls.n	8001328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 0207 	bic.w	r2, r3, #7
 800130e:	4965      	ldr	r1, [pc, #404]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0b8      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d020      	beq.n	8001376 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001340:	4b59      	ldr	r3, [pc, #356]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a58      	ldr	r2, [pc, #352]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800134a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001358:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001362:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001364:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	494d      	ldr	r1, [pc, #308]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d040      	beq.n	8001404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d107      	bne.n	800139a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d115      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e07f      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d107      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a2:	4b41      	ldr	r3, [pc, #260]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e073      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e06b      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c2:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f023 0203 	bic.w	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4936      	ldr	r1, [pc, #216]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d4:	f7ff fa1c 	bl	8000810 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013dc:	f7ff fa18 	bl	8000810 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e053      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f2:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 020c 	and.w	r2, r3, #12
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	429a      	cmp	r2, r3
 8001402:	d1eb      	bne.n	80013dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d210      	bcs.n	8001434 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 0207 	bic.w	r2, r3, #7
 800141a:	4922      	ldr	r1, [pc, #136]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e032      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4916      	ldr	r1, [pc, #88]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d009      	beq.n	8001472 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	490e      	ldr	r1, [pc, #56]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001472:	f000 f821 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8001476:	4601      	mov	r1, r0
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_RCC_ClockConfig+0x1c8>)
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	fa21 f303 	lsr.w	r3, r1, r3
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <HAL_RCC_ClockConfig+0x1cc>)
 800148c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f8ba 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	080038c0 	.word	0x080038c0
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004

080014b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b8:	b490      	push	{r4, r7}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014c0:	1d3c      	adds	r4, r7, #4
 80014c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <HAL_RCC_GetSysClockFreq+0xb4>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d002      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x40>
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d003      	beq.n	80014fe <HAL_RCC_GetSysClockFreq+0x46>
 80014f6:	e02d      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014fa:	623b      	str	r3, [r7, #32]
      break;
 80014fc:	e02d      	b.n	800155a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	0c9b      	lsrs	r3, r3, #18
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800150a:	4413      	add	r3, r2
 800150c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001510:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_RCC_GetSysClockFreq+0xb8>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	0c5b      	lsrs	r3, r3, #17
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800152a:	4413      	add	r3, r2
 800152c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001530:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001536:	fb02 f203 	mul.w	r2, r2, r3
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	e004      	b.n	800154e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	623b      	str	r3, [r7, #32]
      break;
 8001552:	e002      	b.n	800155a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001556:	623b      	str	r3, [r7, #32]
      break;
 8001558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800155a:	6a3b      	ldr	r3, [r7, #32]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bc90      	pop	{r4, r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	080038a4 	.word	0x080038a4
 800156c:	080038b4 	.word	0x080038b4
 8001570:	40021000 	.word	0x40021000
 8001574:	007a1200 	.word	0x007a1200
 8001578:	003d0900 	.word	0x003d0900

0800157c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001580:	4b02      	ldr	r3, [pc, #8]	; (800158c <HAL_RCC_GetHCLKFreq+0x10>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	20000000 	.word	0x20000000

08001590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001594:	f7ff fff2 	bl	800157c <HAL_RCC_GetHCLKFreq>
 8001598:	4601      	mov	r1, r0
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	0a1b      	lsrs	r3, r3, #8
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	080038d0 	.word	0x080038d0

080015b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015bc:	f7ff ffde 	bl	800157c <HAL_RCC_GetHCLKFreq>
 80015c0:	4601      	mov	r1, r0
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	0adb      	lsrs	r3, r3, #11
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	4a03      	ldr	r2, [pc, #12]	; (80015dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	080038d0 	.word	0x080038d0

080015e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	220f      	movs	r2, #15
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_RCC_GetClockConfig+0x58>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_RCC_GetClockConfig+0x58>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_GetClockConfig+0x58>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_RCC_GetClockConfig+0x58>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_RCC_GetClockConfig+0x5c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0207 	and.w	r2, r3, #7
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40021000 	.word	0x40021000
 800163c:	40022000 	.word	0x40022000

08001640 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <RCC_Delay+0x34>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <RCC_Delay+0x38>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0a5b      	lsrs	r3, r3, #9
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800165c:	bf00      	nop
  }
  while (Delay --);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	60fa      	str	r2, [r7, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f9      	bne.n	800165c <RCC_Delay+0x1c>
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000
 8001678:	10624dd3 	.word	0x10624dd3

0800167c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e01d      	b.n	80016ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f815 	bl	80016d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3304      	adds	r3, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4610      	mov	r0, r2
 80016bc:	f000 f962 	bl	8001984 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b06      	cmp	r3, #6
 800170c:	d007      	beq.n	800171e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b02      	cmp	r3, #2
 800173e:	d122      	bne.n	8001786 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d11b      	bne.n	8001786 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f06f 0202 	mvn.w	r2, #2
 8001756:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f8ed 	bl	800194c <HAL_TIM_IC_CaptureCallback>
 8001772:	e005      	b.n	8001780 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f8e0 	bl	800193a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8ef 	bl	800195e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b04      	cmp	r3, #4
 8001792:	d122      	bne.n	80017da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d11b      	bne.n	80017da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f06f 0204 	mvn.w	r2, #4
 80017aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f8c3 	bl	800194c <HAL_TIM_IC_CaptureCallback>
 80017c6:	e005      	b.n	80017d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f8b6 	bl	800193a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f8c5 	bl	800195e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d122      	bne.n	800182e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d11b      	bne.n	800182e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f06f 0208 	mvn.w	r2, #8
 80017fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2204      	movs	r2, #4
 8001804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f899 	bl	800194c <HAL_TIM_IC_CaptureCallback>
 800181a:	e005      	b.n	8001828 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f88c 	bl	800193a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f89b 	bl	800195e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b10      	cmp	r3, #16
 800183a:	d122      	bne.n	8001882 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b10      	cmp	r3, #16
 8001848:	d11b      	bne.n	8001882 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f06f 0210 	mvn.w	r2, #16
 8001852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2208      	movs	r2, #8
 8001858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f86f 	bl	800194c <HAL_TIM_IC_CaptureCallback>
 800186e:	e005      	b.n	800187c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f862 	bl	800193a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f871 	bl	800195e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10e      	bne.n	80018ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f06f 0201 	mvn.w	r2, #1
 80018a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7fe fe0d 	bl	80004c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b8:	2b80      	cmp	r3, #128	; 0x80
 80018ba:	d10e      	bne.n	80018da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	2b80      	cmp	r3, #128	; 0x80
 80018c8:	d107      	bne.n	80018da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f8c0 	bl	8001a5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e4:	2b40      	cmp	r3, #64	; 0x40
 80018e6:	d10e      	bne.n	8001906 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f2:	2b40      	cmp	r3, #64	; 0x40
 80018f4:	d107      	bne.n	8001906 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f835 	bl	8001970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	2b20      	cmp	r3, #32
 8001912:	d10e      	bne.n	8001932 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b20      	cmp	r3, #32
 8001920:	d107      	bne.n	8001932 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f06f 0220 	mvn.w	r2, #32
 800192a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f88b 	bl	8001a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
	...

08001984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a29      	ldr	r2, [pc, #164]	; (8001a3c <TIM_Base_SetConfig+0xb8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00b      	beq.n	80019b4 <TIM_Base_SetConfig+0x30>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a2:	d007      	beq.n	80019b4 <TIM_Base_SetConfig+0x30>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <TIM_Base_SetConfig+0xbc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d003      	beq.n	80019b4 <TIM_Base_SetConfig+0x30>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <TIM_Base_SetConfig+0xc0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d108      	bne.n	80019c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <TIM_Base_SetConfig+0xb8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00b      	beq.n	80019e6 <TIM_Base_SetConfig+0x62>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d4:	d007      	beq.n	80019e6 <TIM_Base_SetConfig+0x62>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <TIM_Base_SetConfig+0xbc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d003      	beq.n	80019e6 <TIM_Base_SetConfig+0x62>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <TIM_Base_SetConfig+0xc0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d108      	bne.n	80019f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <TIM_Base_SetConfig+0xb8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d103      	bne.n	8001a2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	615a      	str	r2, [r3, #20]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40000800 	.word	0x40000800

08001a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e03f      	b.n	8001afe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe fd66 	bl	8000564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2224      	movs	r2, #36	; 0x24
 8001a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fbd1 	bl	8002258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b088      	sub	sp, #32
 8001b0a:	af02      	add	r7, sp, #8
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	f040 8083 	bne.w	8001c2e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_UART_Transmit+0x2e>
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e07b      	b.n	8001c30 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_UART_Transmit+0x40>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e074      	b.n	8001c30 <HAL_UART_Transmit+0x12a>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2221      	movs	r2, #33	; 0x21
 8001b58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b5c:	f7fe fe58 	bl	8000810 <HAL_GetTick>
 8001b60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b6e:	e042      	b.n	8001bf6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b86:	d122      	bne.n	8001bce <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f9f6 	bl	8001f84 <UART_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e046      	b.n	8001c30 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bb4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d103      	bne.n	8001bc6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	e017      	b.n	8001bf6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	e013      	b.n	8001bf6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f9d3 	bl	8001f84 <UART_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e023      	b.n	8001c30 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1b7      	bne.n	8001b70 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2200      	movs	r2, #0
 8001c08:	2140      	movs	r1, #64	; 0x40
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f9ba 	bl	8001f84 <UART_WaitOnFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e00a      	b.n	8001c30 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d130      	bne.n	8001cb4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_UART_Transmit_IT+0x26>
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e029      	b.n	8001cb6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_UART_Transmit_IT+0x38>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e022      	b.n	8001cb6 <HAL_UART_Transmit_IT+0x7e>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2221      	movs	r2, #33	; 0x21
 8001c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e000      	b.n	8001cb6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001cb4:	2302      	movs	r3, #2
  }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d140      	bne.n	8001d5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_UART_Receive_IT+0x26>
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e039      	b.n	8001d5e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_UART_Receive_IT+0x38>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e032      	b.n	8001d5e <HAL_UART_Receive_IT+0x9e>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	88fa      	ldrh	r2, [r7, #6]
 8001d10:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2222      	movs	r2, #34	; 0x22
 8001d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10d      	bne.n	8001dba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_UART_IRQHandler+0x52>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f9ce 	bl	8002154 <UART_Receive_IT>
      return;
 8001db8:	e0cc      	b.n	8001f54 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80ab 	beq.w	8001f18 <HAL_UART_IRQHandler+0x1b0>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_UART_IRQHandler+0x70>
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80a0 	beq.w	8001f18 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_UART_IRQHandler+0x90>
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <HAL_UART_IRQHandler+0xb0>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	f043 0202 	orr.w	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_UART_IRQHandler+0xd0>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	f043 0204 	orr.w	r2, r3, #4
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <HAL_UART_IRQHandler+0xf0>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	f043 0208 	orr.w	r2, r3, #8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d078      	beq.n	8001f52 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <HAL_UART_IRQHandler+0x112>
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f96d 	bl	8002154 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf14      	ite	ne
 8001e88:	2301      	movne	r3, #1
 8001e8a:	2300      	moveq	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <HAL_UART_IRQHandler+0x13a>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d031      	beq.n	8001f06 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8b8 	bl	8002018 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d023      	beq.n	8001efe <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ec4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d013      	beq.n	8001ef6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_UART_IRQHandler+0x1f4>)
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fd82 	bl	80009e4 <HAL_DMA_Abort_IT>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d016      	beq.n	8001f14 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef4:	e00e      	b.n	8001f14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f83b 	bl	8001f72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001efc:	e00a      	b.n	8001f14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f837 	bl	8001f72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f04:	e006      	b.n	8001f14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f833 	bl	8001f72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001f12:	e01e      	b.n	8001f52 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f14:	bf00      	nop
    return;
 8001f16:	e01c      	b.n	8001f52 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_UART_IRQHandler+0x1cc>
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f8a4 	bl	800207a <UART_Transmit_IT>
    return;
 8001f32:	e00f      	b.n	8001f54 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_UART_IRQHandler+0x1ec>
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8eb 	bl	8002124 <UART_EndTransmit_IT>
    return;
 8001f4e:	bf00      	nop
 8001f50:	e000      	b.n	8001f54 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001f52:	bf00      	nop
  }
}
 8001f54:	3720      	adds	r7, #32
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	08002053 	.word	0x08002053

08001f60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f94:	e02c      	b.n	8001ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d028      	beq.n	8001ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fa4:	f7fe fc34 	bl	8000810 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d21d      	bcs.n	8001ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fc2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e00f      	b.n	8002010 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	429a      	cmp	r2, r3
 800200c:	d0c3      	beq.n	8001f96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800202e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff ff80 	bl	8001f72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b21      	cmp	r3, #33	; 0x21
 800208c:	d144      	bne.n	8002118 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002096:	d11a      	bne.n	80020ce <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020ac:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	1c9a      	adds	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	621a      	str	r2, [r3, #32]
 80020c0:	e00e      	b.n	80020e0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	621a      	str	r2, [r3, #32]
 80020cc:	e008      	b.n	80020e0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	1c59      	adds	r1, r3, #1
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6211      	str	r1, [r2, #32]
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4619      	mov	r1, r3
 80020ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10f      	bne.n	8002114 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002102:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002112:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
  }
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff0b 	bl	8001f60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b22      	cmp	r3, #34	; 0x22
 8002166:	d171      	bne.n	800224c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002170:	d123      	bne.n	80021ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10e      	bne.n	800219e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	b29b      	uxth	r3, r3
 8002188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	1c9a      	adds	r2, r3, #2
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
 800219c:	e029      	b.n	80021f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
 80021b8:	e01b      	b.n	80021f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6858      	ldr	r0, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	1c59      	adds	r1, r3, #1
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6291      	str	r1, [r2, #40]	; 0x28
 80021d2:	b2c2      	uxtb	r2, r0
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e00c      	b.n	80021f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	1c58      	adds	r0, r3, #1
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	6288      	str	r0, [r1, #40]	; 0x28
 80021ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4619      	mov	r1, r3
 8002200:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002202:	2b00      	cmp	r3, #0
 8002204:	d120      	bne.n	8002248 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0220 	bic.w	r2, r2, #32
 8002214:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002224:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe f8ca 	bl	80003d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e002      	b.n	800224e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800224c:	2302      	movs	r3, #2
  }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002292:	f023 030c 	bic.w	r3, r3, #12
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	68f9      	ldr	r1, [r7, #12]
 800229c:	430b      	orrs	r3, r1
 800229e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a52      	ldr	r2, [pc, #328]	; (8002404 <UART_SetConfig+0x1ac>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d14e      	bne.n	800235e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022c0:	f7ff f97a 	bl	80015b8 <HAL_RCC_GetPCLK2Freq>
 80022c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	009a      	lsls	r2, r3, #2
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <UART_SetConfig+0x1b0>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	0119      	lsls	r1, r3, #4
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	009a      	lsls	r2, r3, #2
 80022f0:	441a      	add	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022fc:	4b42      	ldr	r3, [pc, #264]	; (8002408 <UART_SetConfig+0x1b0>)
 80022fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2064      	movs	r0, #100	; 0x64
 8002306:	fb00 f303 	mul.w	r3, r0, r3
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	3332      	adds	r3, #50	; 0x32
 8002310:	4a3d      	ldr	r2, [pc, #244]	; (8002408 <UART_SetConfig+0x1b0>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231c:	4419      	add	r1, r3
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	009a      	lsls	r2, r3, #2
 8002328:	441a      	add	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	fbb2 f2f3 	udiv	r2, r2, r3
 8002334:	4b34      	ldr	r3, [pc, #208]	; (8002408 <UART_SetConfig+0x1b0>)
 8002336:	fba3 0302 	umull	r0, r3, r3, r2
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2064      	movs	r0, #100	; 0x64
 800233e:	fb00 f303 	mul.w	r3, r0, r3
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	3332      	adds	r3, #50	; 0x32
 8002348:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <UART_SetConfig+0x1b0>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	f003 020f 	and.w	r2, r3, #15
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	440a      	add	r2, r1
 800235a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800235c:	e04d      	b.n	80023fa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800235e:	f7ff f917 	bl	8001590 <HAL_RCC_GetPCLK1Freq>
 8002362:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	009a      	lsls	r2, r3, #2
 800236e:	441a      	add	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4a23      	ldr	r2, [pc, #140]	; (8002408 <UART_SetConfig+0x1b0>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	0119      	lsls	r1, r3, #4
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	009a      	lsls	r2, r3, #2
 800238e:	441a      	add	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	fbb2 f2f3 	udiv	r2, r2, r3
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <UART_SetConfig+0x1b0>)
 800239c:	fba3 0302 	umull	r0, r3, r3, r2
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	2064      	movs	r0, #100	; 0x64
 80023a4:	fb00 f303 	mul.w	r3, r0, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	3332      	adds	r3, #50	; 0x32
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <UART_SetConfig+0x1b0>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ba:	4419      	add	r1, r3
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	009a      	lsls	r2, r3, #2
 80023c6:	441a      	add	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <UART_SetConfig+0x1b0>)
 80023d4:	fba3 0302 	umull	r0, r3, r3, r2
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	2064      	movs	r0, #100	; 0x64
 80023dc:	fb00 f303 	mul.w	r3, r0, r3
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	3332      	adds	r3, #50	; 0x32
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <UART_SetConfig+0x1b0>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	f003 020f 	and.w	r2, r3, #15
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	440a      	add	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40013800 	.word	0x40013800
 8002408:	51eb851f 	.word	0x51eb851f

0800240c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800241a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800241e:	2b84      	cmp	r3, #132	; 0x84
 8002420:	d005      	beq.n	800242e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002422:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4413      	add	r3, r2
 800242a:	3303      	adds	r3, #3
 800242c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800243e:	f000 facd 	bl	80029dc <vTaskStartScheduler>
  
  return osOK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}

08002448 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af04      	add	r7, sp, #16
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d020      	beq.n	800249c <osThreadCreate+0x54>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01c      	beq.n	800249c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685c      	ldr	r4, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681d      	ldr	r5, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691e      	ldr	r6, [r3, #16]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ffc9 	bl	800240c <makeFreeRtosPriority>
 800247a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002484:	9202      	str	r2, [sp, #8]
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	9100      	str	r1, [sp, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	4632      	mov	r2, r6
 800248e:	4629      	mov	r1, r5
 8002490:	4620      	mov	r0, r4
 8002492:	f000 f8e8 	bl	8002666 <xTaskCreateStatic>
 8002496:	4603      	mov	r3, r0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e01c      	b.n	80024d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685c      	ldr	r4, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024a8:	b29e      	uxth	r6, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ffab 	bl	800240c <makeFreeRtosPriority>
 80024b6:	4602      	mov	r2, r0
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	9200      	str	r2, [sp, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4632      	mov	r2, r6
 80024c4:	4629      	mov	r1, r5
 80024c6:	4620      	mov	r0, r4
 80024c8:	f000 f926 	bl	8002718 <xTaskCreate>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d001      	beq.n	80024d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <osDelay+0x16>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	e000      	b.n	80024f8 <osDelay+0x18>
 80024f6:	2301      	movs	r3, #1
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fa3b 	bl	8002974 <vTaskDelay>
  
  return osOK;
 80024fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f103 0208 	add.w	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 0208 	add.w	r2, r3, #8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f103 0208 	add.w	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	601a      	str	r2, [r3, #0]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ba:	d103      	bne.n	80025c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e00c      	b.n	80025de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3308      	adds	r3, #8
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	e002      	b.n	80025d2 <vListInsert+0x2e>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d2f6      	bcs.n	80025cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6852      	ldr	r2, [r2, #4]
 8002634:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d103      	bne.n	8002648 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	1e5a      	subs	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002666:	b580      	push	{r7, lr}
 8002668:	b08e      	sub	sp, #56	; 0x38
 800266a:	af04      	add	r7, sp, #16
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	e7fe      	b.n	800268c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <xTaskCreateStatic+0x42>
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e7fe      	b.n	80026a6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80026a8:	2354      	movs	r3, #84	; 0x54
 80026aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b54      	cmp	r3, #84	; 0x54
 80026b0:	d009      	beq.n	80026c6 <xTaskCreateStatic+0x60>
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	e7fe      	b.n	80026c4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01e      	beq.n	800270a <xTaskCreateStatic+0xa4>
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01b      	beq.n	800270a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80026e4:	2300      	movs	r3, #0
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f850 	bl	80027a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002704:	f000 f8cc 	bl	80028a0 <prvAddNewTaskToReadyList>
 8002708:	e001      	b.n	800270e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800270e:	697b      	ldr	r3, [r7, #20]
	}
 8002710:	4618      	mov	r0, r3
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	; 0x30
 800271c:	af04      	add	r7, sp, #16
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fe55 	bl	80033dc <pvPortMalloc>
 8002732:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00e      	beq.n	8002758 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800273a:	2054      	movs	r0, #84	; 0x54
 800273c:	f000 fe4e 	bl	80033dc <pvPortMalloc>
 8002740:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
 800274e:	e005      	b.n	800275c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f000 ff05 	bl	8003560 <vPortFree>
 8002756:	e001      	b.n	800275c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d017      	beq.n	8002792 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	2300      	movs	r3, #0
 800276e:	9303      	str	r3, [sp, #12]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f80e 	bl	80027a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002786:	69f8      	ldr	r0, [r7, #28]
 8002788:	f000 f88a 	bl	80028a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800278c:	2301      	movs	r3, #1
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e002      	b.n	8002798 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002798:	69bb      	ldr	r3, [r7, #24]
	}
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b088      	sub	sp, #32
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027ba:	3b01      	subs	r3, #1
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f023 0307 	bic.w	r3, r3, #7
 80027c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d009      	beq.n	80027e8 <prvInitialiseNewTask+0x46>
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e7fe      	b.n	80027e6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	e012      	b.n	8002814 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4413      	add	r3, r2
 80027f4:	7819      	ldrb	r1, [r3, #0]
 80027f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	3334      	adds	r3, #52	; 0x34
 80027fe:	460a      	mov	r2, r1
 8002800:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	d9e9      	bls.n	80027ee <prvInitialiseNewTask+0x4c>
 800281a:	e000      	b.n	800281e <prvInitialiseNewTask+0x7c>
		{
			break;
 800281c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	2b06      	cmp	r3, #6
 800282a:	d901      	bls.n	8002830 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800282c:	2306      	movs	r3, #6
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800283a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	2200      	movs	r2, #0
 8002840:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	3304      	adds	r3, #4
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fe7d 	bl	8002546 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	3318      	adds	r3, #24
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fe78 	bl	8002546 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800285a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	f1c3 0207 	rsb	r2, r3, #7
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	2200      	movs	r2, #0
 8002870:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	69b8      	ldr	r0, [r7, #24]
 8002880:	f000 fc06 	bl	8003090 <pxPortInitialiseStack>
 8002884:	4602      	mov	r2, r0
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002896:	bf00      	nop
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028a8:	f000 fcde 	bl	8003268 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <prvAddNewTaskToReadyList+0xb8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	4a29      	ldr	r2, [pc, #164]	; (8002958 <prvAddNewTaskToReadyList+0xb8>)
 80028b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <prvAddNewTaskToReadyList+0xbc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80028be:	4a27      	ldr	r2, [pc, #156]	; (800295c <prvAddNewTaskToReadyList+0xbc>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <prvAddNewTaskToReadyList+0xb8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d110      	bne.n	80028ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028cc:	f000 fabc 	bl	8002e48 <prvInitialiseTaskLists>
 80028d0:	e00d      	b.n	80028ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028d2:	4b23      	ldr	r3, [pc, #140]	; (8002960 <prvAddNewTaskToReadyList+0xc0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <prvAddNewTaskToReadyList+0xbc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d802      	bhi.n	80028ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028e8:	4a1c      	ldr	r2, [pc, #112]	; (800295c <prvAddNewTaskToReadyList+0xbc>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <prvAddNewTaskToReadyList+0xc4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <prvAddNewTaskToReadyList+0xc4>)
 80028f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	2201      	movs	r2, #1
 80028fe:	409a      	lsls	r2, r3
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <prvAddNewTaskToReadyList+0xc8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <prvAddNewTaskToReadyList+0xc8>)
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <prvAddNewTaskToReadyList+0xcc>)
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f7ff fe1c 	bl	800255e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002926:	f000 fccd 	bl	80032c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <prvAddNewTaskToReadyList+0xc0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00e      	beq.n	8002950 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <prvAddNewTaskToReadyList+0xbc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	429a      	cmp	r2, r3
 800293e:	d207      	bcs.n	8002950 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <prvAddNewTaskToReadyList+0xd0>)
 8002942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000380 	.word	0x20000380
 800295c:	20000280 	.word	0x20000280
 8002960:	2000038c 	.word	0x2000038c
 8002964:	2000039c 	.word	0x2000039c
 8002968:	20000388 	.word	0x20000388
 800296c:	20000284 	.word	0x20000284
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <vTaskDelay+0x60>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <vTaskDelay+0x2e>
 800298e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	e7fe      	b.n	80029a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80029a2:	f000 f879 	bl	8002a98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029a6:	2100      	movs	r1, #0
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fb0b 	bl	8002fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029ae:	f000 f881 	bl	8002ab4 <xTaskResumeAll>
 80029b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <vTaskDelay+0x64>)
 80029bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200003a8 	.word	0x200003a8
 80029d8:	e000ed04 	.word	0xe000ed04

080029dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029ea:	463a      	mov	r2, r7
 80029ec:	1d39      	adds	r1, r7, #4
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fbb4 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80029f8:	6839      	ldr	r1, [r7, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	9202      	str	r2, [sp, #8]
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	460a      	mov	r2, r1
 8002a0a:	491d      	ldr	r1, [pc, #116]	; (8002a80 <vTaskStartScheduler+0xa4>)
 8002a0c:	481d      	ldr	r0, [pc, #116]	; (8002a84 <vTaskStartScheduler+0xa8>)
 8002a0e:	f7ff fe2a 	bl	8002666 <xTaskCreateStatic>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <vTaskStartScheduler+0xac>)
 8002a16:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <vTaskStartScheduler+0xac>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a20:	2301      	movs	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e001      	b.n	8002a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d115      	bne.n	8002a5c <vTaskStartScheduler+0x80>
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <vTaskStartScheduler+0xb0>)
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <vTaskStartScheduler+0xb4>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <vTaskStartScheduler+0xb8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a56:	f000 fb97 	bl	8003188 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a5a:	e00d      	b.n	8002a78 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d109      	bne.n	8002a78 <vTaskStartScheduler+0x9c>
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e7fe      	b.n	8002a76 <vTaskStartScheduler+0x9a>
}
 8002a78:	bf00      	nop
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	080038b8 	.word	0x080038b8
 8002a84:	08002e19 	.word	0x08002e19
 8002a88:	200003a4 	.word	0x200003a4
 8002a8c:	200003a0 	.word	0x200003a0
 8002a90:	2000038c 	.word	0x2000038c
 8002a94:	20000384 	.word	0x20000384

08002a98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <vTaskSuspendAll+0x18>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <vTaskSuspendAll+0x18>)
 8002aa4:	6013      	str	r3, [r2, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	200003a8 	.word	0x200003a8

08002ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <xTaskResumeAll+0x114>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <xTaskResumeAll+0x2a>
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	e7fe      	b.n	8002adc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ade:	f000 fbc3 	bl	8003268 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ae2:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <xTaskResumeAll+0x114>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <xTaskResumeAll+0x114>)
 8002aea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <xTaskResumeAll+0x114>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d161      	bne.n	8002bb8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <xTaskResumeAll+0x118>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d05d      	beq.n	8002bb8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002afc:	e02e      	b.n	8002b5c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <xTaskResumeAll+0x11c>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3318      	adds	r3, #24
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fd82 	bl	8002614 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fd7d 	bl	8002614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	2201      	movs	r2, #1
 8002b20:	409a      	lsls	r2, r3
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <xTaskResumeAll+0x120>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <xTaskResumeAll+0x120>)
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <xTaskResumeAll+0x124>)
 8002b3a:	441a      	add	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f7ff fd0b 	bl	800255e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <xTaskResumeAll+0x128>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <xTaskResumeAll+0x12c>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <xTaskResumeAll+0x11c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1cc      	bne.n	8002afe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b6a:	f000 fa07 	bl	8002f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <xTaskResumeAll+0x130>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b7a:	f000 f837 	bl	8002bec <xTaskIncrementTick>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <xTaskResumeAll+0x12c>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f1      	bne.n	8002b7a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <xTaskResumeAll+0x130>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <xTaskResumeAll+0x12c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <xTaskResumeAll+0x134>)
 8002baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bb8:	f000 fb84 	bl	80032c4 <vPortExitCritical>

	return xAlreadyYielded;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200003a8 	.word	0x200003a8
 8002bcc:	20000380 	.word	0x20000380
 8002bd0:	20000340 	.word	0x20000340
 8002bd4:	20000388 	.word	0x20000388
 8002bd8:	20000284 	.word	0x20000284
 8002bdc:	20000280 	.word	0x20000280
 8002be0:	20000394 	.word	0x20000394
 8002be4:	20000390 	.word	0x20000390
 8002be8:	e000ed04 	.word	0xe000ed04

08002bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bf6:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <xTaskIncrementTick+0x14c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 808c 	bne.w	8002d18 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c00:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <xTaskIncrementTick+0x150>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c08:	4a4c      	ldr	r2, [pc, #304]	; (8002d3c <xTaskIncrementTick+0x150>)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11f      	bne.n	8002c54 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c14:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <xTaskIncrementTick+0x154>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <xTaskIncrementTick+0x46>
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	e7fe      	b.n	8002c30 <xTaskIncrementTick+0x44>
 8002c32:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <xTaskIncrementTick+0x154>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	4b42      	ldr	r3, [pc, #264]	; (8002d44 <xTaskIncrementTick+0x158>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a40      	ldr	r2, [pc, #256]	; (8002d40 <xTaskIncrementTick+0x154>)
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4a40      	ldr	r2, [pc, #256]	; (8002d44 <xTaskIncrementTick+0x158>)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <xTaskIncrementTick+0x15c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	4a3e      	ldr	r2, [pc, #248]	; (8002d48 <xTaskIncrementTick+0x15c>)
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	f000 f994 	bl	8002f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c54:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <xTaskIncrementTick+0x160>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d34d      	bcc.n	8002cfa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <xTaskIncrementTick+0x154>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <xTaskIncrementTick+0x80>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <xTaskIncrementTick+0x82>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <xTaskIncrementTick+0x160>)
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	601a      	str	r2, [r3, #0]
					break;
 8002c7a:	e03e      	b.n	8002cfa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c7c:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <xTaskIncrementTick+0x154>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d203      	bcs.n	8002c9c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c94:	4a2d      	ldr	r2, [pc, #180]	; (8002d4c <xTaskIncrementTick+0x160>)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6013      	str	r3, [r2, #0]
						break;
 8002c9a:	e02e      	b.n	8002cfa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fcb7 	bl	8002614 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	3318      	adds	r3, #24
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fcae 	bl	8002614 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <xTaskIncrementTick+0x164>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <xTaskIncrementTick+0x164>)
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <xTaskIncrementTick+0x168>)
 8002cd8:	441a      	add	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f7ff fc3c 	bl	800255e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <xTaskIncrementTick+0x16c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d3b4      	bcc.n	8002c5e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cf8:	e7b1      	b.n	8002c5e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cfa:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <xTaskIncrementTick+0x16c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d00:	4914      	ldr	r1, [pc, #80]	; (8002d54 <xTaskIncrementTick+0x168>)
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d907      	bls.n	8002d22 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e004      	b.n	8002d22 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <xTaskIncrementTick+0x170>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <xTaskIncrementTick+0x170>)
 8002d20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <xTaskIncrementTick+0x174>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002d2e:	697b      	ldr	r3, [r7, #20]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	200003a8 	.word	0x200003a8
 8002d3c:	20000384 	.word	0x20000384
 8002d40:	20000338 	.word	0x20000338
 8002d44:	2000033c 	.word	0x2000033c
 8002d48:	20000398 	.word	0x20000398
 8002d4c:	200003a0 	.word	0x200003a0
 8002d50:	20000388 	.word	0x20000388
 8002d54:	20000284 	.word	0x20000284
 8002d58:	20000280 	.word	0x20000280
 8002d5c:	20000390 	.word	0x20000390
 8002d60:	20000394 	.word	0x20000394

08002d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <vTaskSwitchContext+0xa0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <vTaskSwitchContext+0xa4>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d78:	e03e      	b.n	8002df8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <vTaskSwitchContext+0xa4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <vTaskSwitchContext+0xa8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d8e:	7afb      	ldrb	r3, [r7, #11]
 8002d90:	f1c3 031f 	rsb	r3, r3, #31
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	491e      	ldr	r1, [pc, #120]	; (8002e10 <vTaskSwitchContext+0xac>)
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <vTaskSwitchContext+0x5a>
	__asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	e7fe      	b.n	8002dbc <vTaskSwitchContext+0x58>
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <vTaskSwitchContext+0xac>)
 8002dca:	4413      	add	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	3308      	adds	r3, #8
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d104      	bne.n	8002dee <vTaskSwitchContext+0x8a>
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <vTaskSwitchContext+0xb0>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	200003a8 	.word	0x200003a8
 8002e08:	20000394 	.word	0x20000394
 8002e0c:	20000388 	.word	0x20000388
 8002e10:	20000284 	.word	0x20000284
 8002e14:	20000280 	.word	0x20000280

08002e18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002e20:	f000 f852 	bl	8002ec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <prvIdleTask+0x28>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d9f9      	bls.n	8002e20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <prvIdleTask+0x2c>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002e3c:	e7f0      	b.n	8002e20 <prvIdleTask+0x8>
 8002e3e:	bf00      	nop
 8002e40:	20000284 	.word	0x20000284
 8002e44:	e000ed04 	.word	0xe000ed04

08002e48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	e00c      	b.n	8002e6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <prvInitialiseTaskLists+0x60>)
 8002e60:	4413      	add	r3, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fb50 	bl	8002508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b06      	cmp	r3, #6
 8002e72:	d9ef      	bls.n	8002e54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002e74:	480d      	ldr	r0, [pc, #52]	; (8002eac <prvInitialiseTaskLists+0x64>)
 8002e76:	f7ff fb47 	bl	8002508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e7a:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <prvInitialiseTaskLists+0x68>)
 8002e7c:	f7ff fb44 	bl	8002508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <prvInitialiseTaskLists+0x6c>)
 8002e82:	f7ff fb41 	bl	8002508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002e86:	480c      	ldr	r0, [pc, #48]	; (8002eb8 <prvInitialiseTaskLists+0x70>)
 8002e88:	f7ff fb3e 	bl	8002508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e8c:	480b      	ldr	r0, [pc, #44]	; (8002ebc <prvInitialiseTaskLists+0x74>)
 8002e8e:	f7ff fb3b 	bl	8002508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <prvInitialiseTaskLists+0x78>)
 8002e94:	4a05      	ldr	r2, [pc, #20]	; (8002eac <prvInitialiseTaskLists+0x64>)
 8002e96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <prvInitialiseTaskLists+0x7c>)
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <prvInitialiseTaskLists+0x68>)
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000284 	.word	0x20000284
 8002eac:	20000310 	.word	0x20000310
 8002eb0:	20000324 	.word	0x20000324
 8002eb4:	20000340 	.word	0x20000340
 8002eb8:	20000354 	.word	0x20000354
 8002ebc:	2000036c 	.word	0x2000036c
 8002ec0:	20000338 	.word	0x20000338
 8002ec4:	2000033c 	.word	0x2000033c

08002ec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ece:	e019      	b.n	8002f04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ed0:	f000 f9ca 	bl	8003268 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <prvCheckTasksWaitingTermination+0x4c>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fb97 	bl	8002614 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <prvCheckTasksWaitingTermination+0x50>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <prvCheckTasksWaitingTermination+0x50>)
 8002eee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <prvCheckTasksWaitingTermination+0x54>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <prvCheckTasksWaitingTermination+0x54>)
 8002ef8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002efa:	f000 f9e3 	bl	80032c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f80e 	bl	8002f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <prvCheckTasksWaitingTermination+0x54>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e1      	bne.n	8002ed0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000354 	.word	0x20000354
 8002f18:	20000380 	.word	0x20000380
 8002f1c:	20000368 	.word	0x20000368

08002f20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fb12 	bl	8003560 <vPortFree>
				vPortFree( pxTCB );
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fb0f 	bl	8003560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f42:	e017      	b.n	8002f74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d103      	bne.n	8002f56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fb06 	bl	8003560 <vPortFree>
	}
 8002f54:	e00e      	b.n	8002f74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d009      	beq.n	8002f74 <prvDeleteTCB+0x54>
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e7fe      	b.n	8002f72 <prvDeleteTCB+0x52>
	}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <prvResetNextTaskUnblockTime+0x40>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <prvResetNextTaskUnblockTime+0x14>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <prvResetNextTaskUnblockTime+0x16>
 8002f90:	2300      	movs	r3, #0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <prvResetNextTaskUnblockTime+0x44>)
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f9e:	e008      	b.n	8002fb2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <prvResetNextTaskUnblockTime+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <prvResetNextTaskUnblockTime+0x44>)
 8002fb0:	6013      	str	r3, [r2, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	20000338 	.word	0x20000338
 8002fc0:	200003a0 	.word	0x200003a0

08002fc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002fce:	4b29      	ldr	r3, [pc, #164]	; (8003074 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fd4:	4b28      	ldr	r3, [pc, #160]	; (8003078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fb1a 	bl	8002614 <uxListRemove>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	2201      	movs	r2, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	4a20      	ldr	r2, [pc, #128]	; (800307c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ffc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d10a      	bne.n	800301c <prvAddCurrentTaskToDelayedList+0x58>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3304      	adds	r3, #4
 8003012:	4619      	mov	r1, r3
 8003014:	481a      	ldr	r0, [pc, #104]	; (8003080 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003016:	f7ff faa2 	bl	800255e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800301a:	e026      	b.n	800306a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	429a      	cmp	r2, r3
 8003032:	d209      	bcs.n	8003048 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3304      	adds	r3, #4
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f7ff faaf 	bl	80025a4 <vListInsert>
}
 8003046:	e010      	b.n	800306a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <prvAddCurrentTaskToDelayedList+0xc4>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3304      	adds	r3, #4
 8003052:	4619      	mov	r1, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f7ff faa5 	bl	80025a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <prvAddCurrentTaskToDelayedList+0xc8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	d202      	bcs.n	800306a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003064:	4a09      	ldr	r2, [pc, #36]	; (800308c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6013      	str	r3, [r2, #0]
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000384 	.word	0x20000384
 8003078:	20000280 	.word	0x20000280
 800307c:	20000388 	.word	0x20000388
 8003080:	2000036c 	.word	0x2000036c
 8003084:	2000033c 	.word	0x2000033c
 8003088:	20000338 	.word	0x20000338
 800308c:	200003a0 	.word	0x200003a0

08003090 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3b04      	subs	r3, #4
 80030a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3b04      	subs	r3, #4
 80030ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3b04      	subs	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030c0:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <pxPortInitialiseStack+0x54>)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3b14      	subs	r3, #20
 80030ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3b20      	subs	r3, #32
 80030d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80030d8:	68fb      	ldr	r3, [r7, #12]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	080030e9 	.word	0x080030e9

080030e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <prvTaskExitError+0x4c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d009      	beq.n	8003110 <prvTaskExitError+0x28>
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e7fe      	b.n	800310e <prvTaskExitError+0x26>
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003122:	bf00      	nop
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0fc      	beq.n	8003124 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	2000000c 	.word	0x2000000c
	...

08003140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <pxCurrentTCBConst2>)
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	6808      	ldr	r0, [r1, #0]
 8003146:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800314a:	f380 8809 	msr	PSP, r0
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f380 8811 	msr	BASEPRI, r0
 800315a:	f04e 0e0d 	orr.w	lr, lr, #13
 800315e:	4770      	bx	lr

08003160 <pxCurrentTCBConst2>:
 8003160:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop

08003168 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003168:	4806      	ldr	r0, [pc, #24]	; (8003184 <prvPortStartFirstTask+0x1c>)
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	6800      	ldr	r0, [r0, #0]
 800316e:	f380 8808 	msr	MSP, r0
 8003172:	b662      	cpsie	i
 8003174:	b661      	cpsie	f
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	df00      	svc	0
 8003180:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003182:	bf00      	nop
 8003184:	e000ed08 	.word	0xe000ed08

08003188 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <xPortStartScheduler+0xcc>)
 8003190:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	22ff      	movs	r2, #255	; 0xff
 800319e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <xPortStartScheduler+0xd0>)
 80031b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031b6:	4b29      	ldr	r3, [pc, #164]	; (800325c <xPortStartScheduler+0xd4>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031bc:	e009      	b.n	80031d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <xPortStartScheduler+0xd4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	4a25      	ldr	r2, [pc, #148]	; (800325c <xPortStartScheduler+0xd4>)
 80031c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d0ef      	beq.n	80031be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <xPortStartScheduler+0xd4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1c3 0307 	rsb	r3, r3, #7
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d009      	beq.n	80031fe <xPortStartScheduler+0x76>
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	e7fe      	b.n	80031fc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <xPortStartScheduler+0xd4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	4a15      	ldr	r2, [pc, #84]	; (800325c <xPortStartScheduler+0xd4>)
 8003206:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <xPortStartScheduler+0xd4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003210:	4a12      	ldr	r2, [pc, #72]	; (800325c <xPortStartScheduler+0xd4>)
 8003212:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <xPortStartScheduler+0xd8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0f      	ldr	r2, [pc, #60]	; (8003260 <xPortStartScheduler+0xd8>)
 8003222:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003226:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <xPortStartScheduler+0xd8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <xPortStartScheduler+0xd8>)
 800322e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003232:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003234:	f000 f8b0 	bl	8003398 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <xPortStartScheduler+0xdc>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800323e:	f7ff ff93 	bl	8003168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003242:	f7ff fd8f 	bl	8002d64 <vTaskSwitchContext>
	prvTaskExitError();
 8003246:	f7ff ff4f 	bl	80030e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	e000e400 	.word	0xe000e400
 8003258:	200003ac 	.word	0x200003ac
 800325c:	200003b0 	.word	0x200003b0
 8003260:	e000ed20 	.word	0xe000ed20
 8003264:	2000000c 	.word	0x2000000c

08003268 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <vPortEnterCritical+0x54>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	4a0d      	ldr	r2, [pc, #52]	; (80032bc <vPortEnterCritical+0x54>)
 8003288:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <vPortEnterCritical+0x54>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d10e      	bne.n	80032b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <vPortEnterCritical+0x58>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <vPortEnterCritical+0x48>
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	e7fe      	b.n	80032ae <vPortEnterCritical+0x46>
	}
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	2000000c 	.word	0x2000000c
 80032c0:	e000ed04 	.word	0xe000ed04

080032c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <vPortExitCritical+0x48>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <vPortExitCritical+0x22>
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	e7fe      	b.n	80032e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <vPortExitCritical+0x48>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <vPortExitCritical+0x48>)
 80032ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <vPortExitCritical+0x48>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d104      	bne.n	8003302 <vPortExitCritical+0x3e>
 80032f8:	2300      	movs	r3, #0
 80032fa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	2000000c 	.word	0x2000000c

08003310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003310:	f3ef 8009 	mrs	r0, PSP
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <pxCurrentTCBConst>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003320:	6010      	str	r0, [r2, #0]
 8003322:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003326:	f04f 0050 	mov.w	r0, #80	; 0x50
 800332a:	f380 8811 	msr	BASEPRI, r0
 800332e:	f7ff fd19 	bl	8002d64 <vTaskSwitchContext>
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f380 8811 	msr	BASEPRI, r0
 800333a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	6808      	ldr	r0, [r1, #0]
 8003342:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003346:	f380 8809 	msr	PSP, r0
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	4770      	bx	lr

08003350 <pxCurrentTCBConst>:
 8003350:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop

08003358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003370:	f7ff fc3c 	bl	8002bec <xTaskIncrementTick>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <SysTick_Handler+0x3c>)
 800337c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	2300      	movs	r3, #0
 8003384:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <vPortSetupTimerInterrupt+0x30>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <vPortSetupTimerInterrupt+0x34>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <vPortSetupTimerInterrupt+0x38>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <vPortSetupTimerInterrupt+0x3c>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <vPortSetupTimerInterrupt+0x40>)
 80033b6:	3b01      	subs	r3, #1
 80033b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033ba:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <vPortSetupTimerInterrupt+0x30>)
 80033bc:	2207      	movs	r2, #7
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	e000e010 	.word	0xe000e010
 80033cc:	e000e018 	.word	0xe000e018
 80033d0:	20000000 	.word	0x20000000
 80033d4:	10624dd3 	.word	0x10624dd3
 80033d8:	e000e014 	.word	0xe000e014

080033dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80033e8:	f7ff fb56 	bl	8002a98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80033ec:	4b57      	ldr	r3, [pc, #348]	; (800354c <pvPortMalloc+0x170>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80033f4:	f000 f90c 	bl	8003610 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033f8:	4b55      	ldr	r3, [pc, #340]	; (8003550 <pvPortMalloc+0x174>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	f040 808c 	bne.w	800351e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01c      	beq.n	8003446 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800340c:	2208      	movs	r2, #8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	2b00      	cmp	r3, #0
 800341c:	d013      	beq.n	8003446 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f023 0307 	bic.w	r3, r3, #7
 8003424:	3308      	adds	r3, #8
 8003426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <pvPortMalloc+0x6a>
	__asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e7fe      	b.n	8003444 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d068      	beq.n	800351e <pvPortMalloc+0x142>
 800344c:	4b41      	ldr	r3, [pc, #260]	; (8003554 <pvPortMalloc+0x178>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	429a      	cmp	r2, r3
 8003454:	d863      	bhi.n	800351e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003456:	4b40      	ldr	r3, [pc, #256]	; (8003558 <pvPortMalloc+0x17c>)
 8003458:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800345a:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <pvPortMalloc+0x17c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003460:	e004      	b.n	800346c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	d903      	bls.n	800347e <pvPortMalloc+0xa2>
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f1      	bne.n	8003462 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800347e:	4b33      	ldr	r3, [pc, #204]	; (800354c <pvPortMalloc+0x170>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003484:	429a      	cmp	r2, r3
 8003486:	d04a      	beq.n	800351e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2208      	movs	r2, #8
 800348e:	4413      	add	r3, r2
 8003490:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	1ad2      	subs	r2, r2, r3
 80034a2:	2308      	movs	r3, #8
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d91e      	bls.n	80034e8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <pvPortMalloc+0xf4>
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	e7fe      	b.n	80034ce <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	1ad2      	subs	r2, r2, r3
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034e2:	69b8      	ldr	r0, [r7, #24]
 80034e4:	f000 f8f6 	bl	80036d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <pvPortMalloc+0x178>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	4a18      	ldr	r2, [pc, #96]	; (8003554 <pvPortMalloc+0x178>)
 80034f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <pvPortMalloc+0x178>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <pvPortMalloc+0x180>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d203      	bcs.n	800350a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <pvPortMalloc+0x178>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <pvPortMalloc+0x180>)
 8003508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <pvPortMalloc+0x174>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	431a      	orrs	r2, r3
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800351e:	f7ff fac9 	bl	8002ab4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <pvPortMalloc+0x164>
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e7fe      	b.n	800353e <pvPortMalloc+0x162>
	return pvReturn;
 8003540:	69fb      	ldr	r3, [r7, #28]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3728      	adds	r7, #40	; 0x28
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000fbc 	.word	0x20000fbc
 8003550:	20000fc8 	.word	0x20000fc8
 8003554:	20000fc0 	.word	0x20000fc0
 8003558:	20000fb4 	.word	0x20000fb4
 800355c:	20000fc4 	.word	0x20000fc4

08003560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d046      	beq.n	8003600 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003572:	2308      	movs	r3, #8
 8003574:	425b      	negs	r3, r3
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4413      	add	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4b20      	ldr	r3, [pc, #128]	; (8003608 <vPortFree+0xa8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <vPortFree+0x42>
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e7fe      	b.n	80035a0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <vPortFree+0x5e>
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	e7fe      	b.n	80035bc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <vPortFree+0xa8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d019      	beq.n	8003600 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d115      	bne.n	8003600 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <vPortFree+0xa8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80035e4:	f7ff fa58 	bl	8002a98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	4b07      	ldr	r3, [pc, #28]	; (800360c <vPortFree+0xac>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a06      	ldr	r2, [pc, #24]	; (800360c <vPortFree+0xac>)
 80035f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80035f6:	6938      	ldr	r0, [r7, #16]
 80035f8:	f000 f86c 	bl	80036d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80035fc:	f7ff fa5a 	bl	8002ab4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003600:	bf00      	nop
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000fc8 	.word	0x20000fc8
 800360c:	20000fc0 	.word	0x20000fc0

08003610 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003616:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800361a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <prvHeapInit+0xac>)
 800361e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3307      	adds	r3, #7
 800362e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0307 	bic.w	r3, r3, #7
 8003636:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <prvHeapInit+0xac>)
 8003640:	4413      	add	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003648:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <prvHeapInit+0xb0>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <prvHeapInit+0xb0>)
 8003650:	2200      	movs	r2, #0
 8003652:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4413      	add	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800365c:	2208      	movs	r2, #8
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0307 	bic.w	r3, r3, #7
 800366a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <prvHeapInit+0xb4>)
 8003670:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003672:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <prvHeapInit+0xb4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <prvHeapInit+0xb4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	1ad2      	subs	r2, r2, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <prvHeapInit+0xb4>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <prvHeapInit+0xb8>)
 800369e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4a09      	ldr	r2, [pc, #36]	; (80036cc <prvHeapInit+0xbc>)
 80036a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <prvHeapInit+0xc0>)
 80036aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	200003b4 	.word	0x200003b4
 80036c0:	20000fb4 	.word	0x20000fb4
 80036c4:	20000fbc 	.word	0x20000fbc
 80036c8:	20000fc4 	.word	0x20000fc4
 80036cc:	20000fc0 	.word	0x20000fc0
 80036d0:	20000fc8 	.word	0x20000fc8

080036d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80036dc:	4b27      	ldr	r3, [pc, #156]	; (800377c <prvInsertBlockIntoFreeList+0xa8>)
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e002      	b.n	80036e8 <prvInsertBlockIntoFreeList+0x14>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d8f7      	bhi.n	80036e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4413      	add	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d108      	bne.n	8003716 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	441a      	add	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	441a      	add	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d118      	bne.n	800375c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <prvInsertBlockIntoFreeList+0xac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d00d      	beq.n	8003752 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	441a      	add	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e008      	b.n	8003764 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <prvInsertBlockIntoFreeList+0xac>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e003      	b.n	8003764 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d002      	beq.n	8003772 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	20000fb4 	.word	0x20000fb4
 8003780:	20000fbc 	.word	0x20000fbc

08003784 <__libc_init_array>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	2500      	movs	r5, #0
 8003788:	4e0c      	ldr	r6, [pc, #48]	; (80037bc <__libc_init_array+0x38>)
 800378a:	4c0d      	ldr	r4, [pc, #52]	; (80037c0 <__libc_init_array+0x3c>)
 800378c:	1ba4      	subs	r4, r4, r6
 800378e:	10a4      	asrs	r4, r4, #2
 8003790:	42a5      	cmp	r5, r4
 8003792:	d109      	bne.n	80037a8 <__libc_init_array+0x24>
 8003794:	f000 f822 	bl	80037dc <_init>
 8003798:	2500      	movs	r5, #0
 800379a:	4e0a      	ldr	r6, [pc, #40]	; (80037c4 <__libc_init_array+0x40>)
 800379c:	4c0a      	ldr	r4, [pc, #40]	; (80037c8 <__libc_init_array+0x44>)
 800379e:	1ba4      	subs	r4, r4, r6
 80037a0:	10a4      	asrs	r4, r4, #2
 80037a2:	42a5      	cmp	r5, r4
 80037a4:	d105      	bne.n	80037b2 <__libc_init_array+0x2e>
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ac:	4798      	blx	r3
 80037ae:	3501      	adds	r5, #1
 80037b0:	e7ee      	b.n	8003790 <__libc_init_array+0xc>
 80037b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037b6:	4798      	blx	r3
 80037b8:	3501      	adds	r5, #1
 80037ba:	e7f2      	b.n	80037a2 <__libc_init_array+0x1e>
 80037bc:	080038d8 	.word	0x080038d8
 80037c0:	080038d8 	.word	0x080038d8
 80037c4:	080038d8 	.word	0x080038d8
 80037c8:	080038dc 	.word	0x080038dc

080037cc <memset>:
 80037cc:	4603      	mov	r3, r0
 80037ce:	4402      	add	r2, r0
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d100      	bne.n	80037d6 <memset+0xa>
 80037d4:	4770      	bx	lr
 80037d6:	f803 1b01 	strb.w	r1, [r3], #1
 80037da:	e7f9      	b.n	80037d0 <memset+0x4>

080037dc <_init>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr

080037e8 <_fini>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr
